# The simulation of the process
for (k in 2:t_max) {
E[k] <- L + sum(rgeom(X[k - 1], p))
L <- rbinom(1, E[k], beta)
X[k] <- E[k] - L + I[k + burn_in + 1]
}
return(list(X = X, E = E))
}
kappa <- 0.9
beta <- 0.4
tau <- 1.2
alpha <- (1 - beta) * kappa
nu <- (1 - beta) * tau
ginarma <- sim_ginarma11_geom(beta, kappa, tau, burn_in = 100, t_max = 1e4)
ingarch <- sim_ingarch11_geom(alpha, beta, nu, 1, 1, burn_in = 100, t_max = 1e4)
df_ginarma <- ginarma$X %>% table %>% as.data.frame()
names(df_ginarma) <- c("X", "Freq")
df_ginarma <- df %>% mutate(model = "GINARMA")
df_ingarch <- ingarch$X %>% table %>% as.data.frame()
names(df_ingarch) <- c("X", "Freq")
df_ingarch <- df %>% mutate(model = "INGARCH")
df <- rbind(df_ginarma, df_ingarch)
ggplot(df, aes(x = X, y = Freq, fill = model)) +
geom_bar(stat = "identity", position = position_dodge())
ginarma <- sim_ginarma11_geom(beta, kappa, tau, burn_in = 100, t_max = 1e4)
ingarch <- sim_ingarch11_geom(alpha, beta, nu, 1, 1, burn_in = 100, t_max = 1e4)
head(ginarma$X)
head(ingarch$X)
df_ginarma <- ginarma$X %>% table %>% as.data.frame()
names(df_ginarma) <- c("X", "Freq")
df_ginarma <- df %>% mutate(model = "GINARMA")
df_ingarch <- ingarch$X %>% table %>% as.data.frame()
names(df_ingarch) <- c("X", "Freq")
df_ingarch <- df %>% mutate(model = "INGARCH")
head(df_ingarch)
head(df_ginarma)
rm(list = ls)
rm(list = ls())
sim_ingarch11_geom <- function (alpha, beta, nu, X0, lambda0, t_max = 100, burn_in = 1) {
# Initialisation
X <- integer(t_max)
lambda <- vector(mode = "numeric", t_max)
lambda[1] <- lambda0
X[1] <- X0
# The burn-in period to reach the stationary distribution
for (k in 1:burn_in) {
lambda[1] <- nu + alpha * X[1] + beta * lambda[1]
p <- 1 / (1 + lambda[1])
X[1] <- rgeom(1, p)
}
# The simulation of the process
for (k in 2:t_max) {
lambda[k] <- nu + alpha * X[k - 1] + beta * lambda[k - 1]
p <- 1 / (1 + lambda[k - 1])
X[k] <- rgeom(1, p)
}
return(list(X = X, lambda = lambda))
}
sim_ginarma11_geom <- function(beta, kappa, tau, E_0 = 1, t_max = 100, burn_in = 1) {
# Poisson distribution of imports
I <- rpois(t_max + burn_in + 1, tau)
# Initialisation
X <- integer(t_max)
E <- integer(t_max)
L <- rbinom(1, E_0, beta)
X[1] <- X_0 <- E_0 - L + I[1]
# Geometric distribution parametrization: mean -> probability
p <- 1 / (1 + kappa)
# The burn-in period to reach the stationary distribution
for (k in 1:burn_in) {
E[1] <- L + sum(rgeom(X[1], p))
L <- rbinom(1, E[1], beta)
X[1] <- E[1] - L + I[k + 1]
}
# The simulation of the process
for (k in 2:t_max) {
E[k] <- L + sum(rgeom(X[k - 1], p))
L <- rbinom(1, E[k], beta)
X[k] <- E[k] - L + I[k + burn_in + 1]
}
return(list(X = X, E = E))
}
kappa <- 0.9
beta <- 0.4
tau <- 1.2
alpha <- (1 - beta) * kappa
nu <- (1 - beta) * tau
ginarma <- sim_ginarma11_geom(beta, kappa, tau, burn_in = 100, t_max = 1e4)
ingarch <- sim_ingarch11_geom(alpha, beta, nu, 1, 1, burn_in = 100, t_max = 1e4)
df_ginarma <- ginarma$X %>% table %>% as.data.frame()
names(df_ginarma) <- c("X", "Freq")
df_ginarma <- df %>% mutate(model = "GINARMA")
df_ginarma <- df_ginarma %>% mutate(model = "GINARMA")
df_ingarch <- ingarch$X %>% table %>% as.data.frame()
names(df_ingarch) <- c("X", "Freq")
df_ingarch <- df_ingarch %>% mutate(model = "INGARCH")
df <- rbind(df_ginarma, df_ingarch)
ggplot(df, aes(x = X, y = Freq, fill = model)) +
geom_bar(stat = "identity", position = position_dodge())
q()
sim_ginarma11_geom_one <- function(beta, kappa, tau, E0 = 1, t_max = 100, burn_in = 1) {
# Poisson distribution of imports
I <- rpois(t_max + burn_in + 1, tau)
# Initialisation
X <- integer(t_max)
E <- integer(t_max)
L <- rbinom(1, E0, beta)
X[1] <- X_0 <- E0 - L + I[1]
# Geometric distribution parametrization: mean -> probability
p <- 1 / (1 + kappa)
# The burn-in period to reach the stationary distribution
for (k in 1:burn_in) {
E[1] <- L + sum(rgeom(X[1], p))
L <- rbinom(1, E[1], beta)
X[1] <- E[1] - L + I[k + 1]
}
E0 <- E[1]
X0 <- X[1]
# The simulation of one step of the process
for (k in 2:t_max) {
L <- rbinom(1, X0, beta)
E[k] <- L + sum(rgeom(X0, p))
X[k] <- E0 - L + I[k + burn_in + 1]
}
return(list(X = X, E = E))
}
kappa <- 0.9
beta <- 0.4
tau <- 1.2
alpha <- (1 - beta) * kappa
nu <- (1 - beta) * tau
one_step <- sim_ginarma11_geom_one(beta, kappa, tau, t_max = 1e4, burn_in = 100)
table(one_step$E)
table(one_step)
df_E <- one_step$E %>% table() %>% as.data.frame()
library(tidyverse)
df_E <- one_step$E %>% table() %>% as.data.frame()
head(df_E)
mode_E <- df_E$.[which.max(df_E$Freq)]
mode_E
mode_E <- df_E$.[which.max(df_E$Freq)] %>% as.numeric
mode_E
mode_E <- df_E$.[which.max(df_E$Freq)] %>% as.character %>% as.numeric
mode_E
sim_ginarma11_geom_one <- function(beta, kappa, tau, E0 = 1, t_max = 100, burn_in = 1) {
# Poisson distribution of imports
I <- rpois(t_max + burn_in + 1, tau)
# Initialisation
X <- integer(t_max)
E <- integer(t_max)
L <- rbinom(1, E0, beta)
X[1] <- X_0 <- E0 - L + I[1]
# Geometric distribution parametrization: mean -> probability
p <- 1 / (1 + kappa)
# The burn-in period to reach the stationary distribution
for (k in 1:burn_in) {
E[1] <- L + sum(rgeom(X[1], p))
L <- rbinom(1, E[1], beta)
X[1] <- E[1] - L + I[k + 1]
}
E0 <- E[1]
# The simulation of one step of the process
for (k in 2:t_max) {
L <- rbinom(1, X0, beta)
X[k] <- E0 - L + I[k + burn_in + 1]
}
return(list(X = X, E0 = E0))
}
one_step <- sim_ginarma11_geom_one(beta, kappa, tau, t_max = 1e4, burn_in = 100)
sim_ginarma11_geom_one <- function(beta, kappa, tau, E0 = 1, t_max = 100, burn_in = 1) {
# Poisson distribution of imports
I <- rpois(t_max, tau)
# Initialisation
X <- integer(t_max)
# Geometric distribution parametrization: mean -> probability
p <- 1 / (1 + kappa)
# The simulation of one step of the process
for (k in 2:t_max) {
L <- rbinom(1, E0, beta)
X[k] <- E0 - L + I[k]
}
return(list(X = X, E0 = E0))
}
one_step <- sim_ginarma11_geom_one(beta, kappa, tau, t_max = 1e4, burn_in = 100,
E0 = 5)
E0 <- 5
one_step <- sim_ginarma11_geom_one(beta, kappa, tau, t_max = 1e4, burn_in = 100,
E0 = E0)
lambda <- (1 - beta) * E0 + tau
?rename
df_X <- one_step$X %>% table %>% as.data.frame() %>% rename(X = ".") %>% mutate(
X = as.numeric(as.character(X))
)
head(df_X)
ggplot(df, aes(x = X)) +
geom_bar(stat = "identity")
ggplot(df_X, aes(x = X)) +
geom_bar(stat = "identity")
head(df_X)
df_X
ggplot(df_X, aes(x = X, y = Freq)) +
geom_bar(stat = "identity")
E0 <- 10
one_step <- sim_ginarma11_geom_one(beta, kappa, tau, t_max = 1e4, burn_in = 100,
E0 = E0)
lambda <- (1 - beta) * E0 + tau
df_X <- one_step$X %>% table %>% as.data.frame() %>% rename(X = ".") %>% mutate(
X = as.numeric(as.character(X))
)
ggplot(df_X, aes(x = X, y = Freq)) +
geom_bar(stat = "identity") +
geom_vline(xintercept = lambda, color ="red")
one_step <- sim_ginarma11_geom_one(beta, kappa, tau, t_max = 1e4, burn_in = 100,
E0 = E0)
lambda <- (1 - beta) * E0 + tau
df_X <- one_step$X %>% table %>% as.data.frame() %>% rename(X = ".") %>% mutate(
X = as.numeric(as.character(X))
)
ggplot(df_X, aes(x = X, y = Freq)) +
geom_bar(stat = "identity") +
geom_vline(xintercept = lambda, color ="red")
one_step <- sim_ginarma11_geom_one(beta, kappa, tau, t_max = 1e4, burn_in = 100,
E0 = E0)
lambda <- (1 - beta) * E0 + tau
df_X <- one_step$X %>% table %>% as.data.frame() %>% rename(X = ".") %>% mutate(
X = as.numeric(as.character(X))
)
ggplot(df_X, aes(x = X, y = Freq)) +
geom_bar(stat = "identity") +
geom_vline(xintercept = lambda, color ="red")
one_step <- sim_ginarma11_geom_one(beta, kappa, tau, t_max = 1e4, burn_in = 100,
E0 = E0)
lambda <- (1 - beta) * E0 + tau
df_X <- one_step$X %>% table %>% as.data.frame() %>% rename(X = ".") %>% mutate(
X = as.numeric(as.character(X))
)
ggplot(df_X, aes(x = X, y = Freq)) +
geom_bar(stat = "identity") +
geom_vline(xintercept = lambda, color ="red")
one_step <- sim_ginarma11_geom_one(beta, kappa, tau, t_max = 1e4, burn_in = 100,
E0 = E0)
lambda <- (1 - beta) * E0 + tau
df_X <- one_step$X %>% table %>% as.data.frame() %>% rename(X = ".") %>% mutate(
X = as.numeric(as.character(X))
)
ggplot(df_X, aes(x = X, y = Freq)) +
geom_bar(stat = "identity") +
geom_vline(xintercept = lambda, color ="red")
one_step <- sim_ginarma11_geom_one(beta, kappa, tau, t_max = 1e4, burn_in = 100,
E0 = E0)
lambda <- (1 - beta) * E0 + tau
df_X <- one_step$X %>% table %>% as.data.frame() %>% rename(X = ".") %>% mutate(
X = as.numeric(as.character(X))
)
ggplot(df_X, aes(x = X, y = Freq)) +
geom_bar(stat = "identity") +
geom_vline(xintercept = lambda, color ="red")
one_step <- sim_ginarma11_geom_one(beta, kappa, tau, t_max = 1e4, burn_in = 100,
E0 = E0)
lambda <- (1 - beta) * E0 + tau
df_X <- one_step$X %>% table %>% as.data.frame() %>% rename(X = ".") %>% mutate(
X = as.numeric(as.character(X))
)
ggplot(df_X, aes(x = X, y = Freq)) +
geom_bar(stat = "identity") +
geom_vline(xintercept = lambda, color ="red")
one_step <- sim_ginarma11_geom_one(beta, kappa, tau, t_max = 1e4, burn_in = 100,
E0 = E0)
lambda <- (1 - beta) * E0 + tau
df_X <- one_step$X %>% table %>% as.data.frame() %>% rename(X = ".") %>% mutate(
X = as.numeric(as.character(X))
)
ggplot(df_X, aes(x = X, y = Freq)) +
geom_bar(stat = "identity") +
geom_vline(xintercept = lambda, color ="red")
E0 <- 1
one_step <- sim_ginarma11_geom_one(beta, kappa, tau, t_max = 1e4, burn_in = 100,
E0 = E0)
lambda <- (1 - beta) * E0 + tau
df_X <- one_step$X %>% table %>% as.data.frame() %>% rename(X = ".") %>% mutate(
X = as.numeric(as.character(X))
)
ggplot(df_X, aes(x = X, y = Freq)) +
geom_bar(stat = "identity") +
geom_vline(xintercept = lambda, color ="red")
E0 <- 100
one_step <- sim_ginarma11_geom_one(beta, kappa, tau, t_max = 1e4, burn_in = 100,
E0 = E0)
lambda <- (1 - beta) * E0 + tau
df_X <- one_step$X %>% table %>% as.data.frame() %>% rename(X = ".") %>% mutate(
X = as.numeric(as.character(X))
)
ggplot(df_X, aes(x = X, y = Freq)) +
geom_bar(stat = "identity") +
geom_vline(xintercept = lambda, color ="red")
E0 <- 1000
one_step <- sim_ginarma11_geom_one(beta, kappa, tau, t_max = 1e4, burn_in = 100,
E0 = E0)
lambda <- (1 - beta) * E0 + tau
df_X <- one_step$X %>% table %>% as.data.frame() %>% rename(X = ".") %>% mutate(
X = as.numeric(as.character(X))
)
ggplot(df_X, aes(x = X, y = Freq)) +
geom_bar(stat = "identity") +
geom_vline(xintercept = lambda, color ="red")
E0 <- 10
one_step <- sim_ginarma11_geom_one(beta, kappa, tau, t_max = 1e4, burn_in = 100,
E0 = E0)
lambda <- (1 - beta) * E0 + tau
df_X <- one_step$X %>% table %>% as.data.frame() %>% rename(X = ".") %>% mutate(
X = as.numeric(as.character(X))
)
ggplot(df_X, aes(x = X, y = Freq)) +
geom_bar(stat = "identity") +
geom_vline(xintercept = lambda, color ="red")
df_Pois <- data.frame(
X = df_X$X,
Freq = 1e4 * dpois(df_X$X, lambda)
)
df_X <- one_step$X %>% table %>% as.data.frame() %>% rename(X = ".") %>% mutate(
X = as.numeric(as.character(X)),
type = "simulated"
)
df_Pois <- data.frame(
X = df_X$X,
Freq = 1e4 * dpois(df_X$X, lambda),
type = "Poisson distributed"
)
ggplot(df_X, aes(x = X, y = Freq, fill = type)) +
geom_bar(stat = "identity") +
geom_vline(xintercept = lambda, color ="red", position = position_dodge())
df <- rbind(df_X, df_Pois)
ggplot(df, aes(x = X, y = Freq, fill = type)) +
geom_bar(stat = "identity") +
geom_vline(xintercept = lambda, color ="red", position = position_dodge())
ggplot(df, aes(x = X, y = Freq, fill = type)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_vline(xintercept = lambda, color ="red")
E0 <- 100
one_step <- sim_ginarma11_geom_one(beta, kappa, tau, t_max = 1e4, burn_in = 100,
E0 = E0)
lambda <- (1 - beta) * E0 + tau
df_X <- one_step$X %>% table %>% as.data.frame() %>% rename(X = ".") %>% mutate(
X = as.numeric(as.character(X)),
type = "simulated"
)
df_Pois <- data.frame(
X = df_X$X,
Freq = 1e4 * dpois(df_X$X, lambda),
type = "Poisson distributed"
)
df <- rbind(df_X, df_Pois)
ggplot(df, aes(x = X, y = Freq, fill = type)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_vline(xintercept = lambda, color ="red")
sim_ingarch11_geom <- function (alpha, beta, nu, X0, lambda0, t_max = 100, burn_in = 1) {
# Initialisation
X <- integer(t_max)
lambda <- vector(mode = "numeric", t_max)
lambda[1] <- lambda0
X[1] <- X0
# The burn-in period to reach the stationary distribution
for (k in 1:burn_in) {
lambda[1] <- nu + alpha * X[1] + beta * lambda[1]
p <- 1 / (1 + lambda[1])
X[1] <- rpois(nu) + rbinom(1, floor(lambda[1] - nu), beta)
}
# The simulation of the process
for (k in 2:t_max) {
lambda[k] <- nu + alpha * X[k - 1] + beta * lambda[k - 1]
p <- 1 / (1 + lambda[k - 1])
X[k] <- rgeom(1, p)
}
return(list(X = X, lambda = lambda))
}
sim_ginarma11_geom <- function(beta, kappa, tau, E_0 = 1, t_max = 100, burn_in = 1) {
# Poisson distribution of imports
I <- rpois(t_max + burn_in + 1, tau)
# Initialisation
X <- integer(t_max)
E <- integer(t_max)
L <- rbinom(1, E_0, beta)
X[1] <- X_0 <- E_0 - L + I[1]
# Geometric distribution parametrization: mean -> probability
p <- 1 / (1 + kappa)
# The burn-in period to reach the stationary distribution
for (k in 1:burn_in) {
E[1] <- L + sum(rgeom(X[1], p))
L <- rbinom(1, E[1], beta)
X[1] <- E[1] - L + I[k + 1]
}
# The simulation of the process
for (k in 2:t_max) {
E[k] <- L + sum(rgeom(X[k - 1], p))
L <- rbinom(1, E[k], beta)
X[k] <- E[k] - L + I[k + burn_in + 1]
}
return(list(X = X, E = E))
}
kappa <- 0.9
beta <- 0.4
tau <- 1.2
alpha <- (1 - beta) * kappa
nu <- (1 - beta) * tau
ginarma <- sim_ginarma11_geom(beta, kappa, tau, burn_in = 100, t_max = 1e4)
ingarch <- sim_ingarch11_geom(alpha, beta, nu, 1, 1, burn_in = 100, t_max = 1e4)
sim_ingarch11_geom <- function (alpha, beta, nu, X0, lambda0, t_max = 100, burn_in = 1) {
# Initialisation
X <- integer(t_max)
lambda <- vector(mode = "numeric", t_max)
lambda[1] <- lambda0
X[1] <- X0
# The burn-in period to reach the stationary distribution
for (k in 1:burn_in) {
lambda[1] <- nu + alpha * X[1] + beta * lambda[1]
p <- 1 / (1 + lambda[1])
X[1] <- rpois(nu) + rbinom(1, floor(lambda[1] - nu), beta)
}
# The simulation of the process
for (k in 2:t_max) {
lambda[k] <- nu + alpha * X[k - 1] + beta * lambda[k - 1]
p <- 1 / (1 + lambda[k - 1])
X[k] <- rpois(nu) + rbinom(1, floor(lambda[k] - nu), beta)
}
return(list(X = X, lambda = lambda))
}
ingarch <- sim_ingarch11_geom(alpha, beta, nu, 1, 1, burn_in = 100, t_max = 1e4)
sim_ingarch11_geom <- function (alpha, beta, nu, X0, lambda0, t_max = 100, burn_in = 1) {
# Initialisation
X <- integer(t_max)
lambda <- vector(mode = "numeric", t_max)
lambda[1] <- lambda0
X[1] <- X0
# The burn-in period to reach the stationary distribution
for (k in 1:burn_in) {
lambda[1] <- nu + alpha * X[1] + beta * lambda[1]
p <- 1 / (1 + lambda[1])
X[1] <- rpois(1, nu) + rbinom(1, floor(lambda[1] - nu), beta)
}
# The simulation of the process
for (k in 2:t_max) {
lambda[k] <- nu + alpha * X[k - 1] + beta * lambda[k - 1]
p <- 1 / (1 + lambda[k - 1])
X[k] <- rpois(1, nu) + rbinom(1, floor(lambda[k] - nu), beta)
}
return(list(X = X, lambda = lambda))
}
ginarma <- sim_ginarma11_geom(beta, kappa, tau, burn_in = 100, t_max = 1e4)
ingarch <- sim_ingarch11_geom(alpha, beta, nu, 1, 1, burn_in = 100, t_max = 1e4)
df_ginarma <- ginarma$X %>% table %>% as.data.frame()
names(df_ginarma) <- c("X", "Freq")
df_ginarma <- df_ginarma %>% mutate(model = "GINARMA")
df_ingarch <- ingarch$X %>% table %>% as.data.frame()
names(df_ingarch) <- c("X", "Freq")
df_ingarch <- df_ingarch %>% mutate(model = "INGARCH")
df <- rbind(df_ginarma, df_ingarch)
ggplot(df, aes(x = X, y = Freq, fill = model)) +
geom_bar(stat = "identity", position = position_dodge())
q()
1250 + 3227 + 2695 + 5000
q()
d
q()
q()
library(devtools)
setwd("~/Framework_INAR_INGARCH/Codes/ginarma/Simulation/Poisson")
load_all("~/Framework_INAR_INGARCH/Codes/Simulations_Baru/rinarma")
s <- 1
lgt <- 250
source("Simulation_Estimation_Poisson.R")
rm(list = ls)
rm(list = ls())
s <- 1
lgt <- 250
source("Simulation_Estimation_Poisson.R")
fn
par
fn(par)
s <- 1
lgt <- 250
source("Simulation_Estimation_Poisson.R")
s <- 1
lgt <- 250
source("Simulation_Estimation_Poisson.R")
s <- 1
lgt <- 250
source("Simulation_Estimation_Poisson.R")
return_se
control_optim
s <- 1
lgt <- 250
source("Simulation_Estimation_Poisson.R")
pars
s <- 1
lgt <- 250
source("Simulation_Estimation_Poisson.R")
s <- 1
lgt <- 250
source("Simulation_Estimation_Poisson.R")
getwd()
load_all("C:/Users/localadmin/Documents/Framework_INAR_INGARCH/Codes/Simulations_Baru/rinarma")
s <- 1
lgt <- 250
source("Simulation_Estimation_Poisson.R")
s <- 1
lgt <- 500
source("Simulation_Estimation_Poisson.R")
rm(list = ls())
s <- 1
lgt <- 1000
source("Simulation_Estimation_Poisson.R")
q()
